# Generated by Django 4.2.6 on 2024-04-24 11:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Diagnoses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speciality', models.CharField(blank=True, max_length=50, null=True)),
                ('years_of_experience', models.CharField(blank=True, max_length=50, null=True)),
                ('year_of_issue', models.CharField(blank=True, max_length=50, null=True)),
                ('diabetes_management_experience', models.TextField(blank=True, null=True)),
                ('treatment_approach', models.TextField(blank=True, null=True)),
                ('contact_hours', models.CharField(blank=True, max_length=50, null=True)),
                ('tel_number', models.CharField(blank=True, max_length=50, null=True)),
                ('emergency_consultations', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Drugs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.CharField(blank=True, max_length=200, null=True)),
                ('Time_of_day', models.CharField(blank=True, max_length=200, null=True)),
                ('duration', models.CharField(blank=True, max_length=200, null=True)),
                ('dosage', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('field_type', models.CharField(choices=[('text', 'Text'), ('password', 'Password'), ('number', 'Number'), ('email', 'Email'), ('phone', 'Phone'), ('radio', 'radio'), ('checkbox', 'Checkbox'), ('select', 'Select')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='FollowUps',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forms', to='HealthManagementApp.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='Histories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('location', models.CharField(max_length=50)),
                ('doctor_initials', models.CharField(max_length=50)),
                ('is_valid', models.BooleanField(default=True)),
                ('gmc_registration_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('complaints_history', models.TextField(blank=True, null=True)),
                ('last_review_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_diabetes_medication', models.TextField(blank=True, null=True)),
                ('dietary_habits', models.TextField(blank=True, null=True)),
                ('type_of_diabetes', models.CharField(blank=True, max_length=50, null=True)),
                ('date_of_diagnosis', models.DateField(blank=True, null=True)),
                ('blood_sugar_level', models.IntegerField(blank=True, null=True)),
                ('target_blood_sugar_level', models.IntegerField(blank=True, null=True)),
                ('family_medical_history', models.TextField(blank=True, null=True)),
                ('medical_history', models.TextField(blank=True, null=True)),
                ('medication_adherence', models.TextField(blank=True, null=True)),
                ('physical_activity_level', models.TextField(blank=True, null=True)),
                ('smoking_habits', models.CharField(blank=True, max_length=50, null=True)),
                ('alcohol_consumption', models.CharField(blank=True, max_length=50, null=True)),
                ('doctors', models.ManyToManyField(related_name='patients_treated', to='HealthManagementApp.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.PositiveSmallIntegerField(choices=[(1, 'patient'), (2, 'doctor'), (3, 'admin')], primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Salt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SupportInquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Symptoms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vitals',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_created=True, auto_now_add=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('reading', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('type', models.CharField(blank=True, choices=[('Doctor', 'Doctor'), ('Patient', 'Patient')], max_length=50, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin')], default='patient', max_length=50)),
                ('doctor', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctor_user', to='HealthManagementApp.doctor')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('patient', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_user', to='HealthManagementApp.patient')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WeeklyAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=9)),
                ('is_working', models.BooleanField(default=False)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='HealthManagementApp.doctor')),
            ],
            options={
                'unique_together': {('doctor', 'day_of_week')},
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('location', models.CharField(blank=True, max_length=255)),
                ('is_available', models.BooleanField(default=True)),
                ('weekly_availability', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='HealthManagementApp.weeklyavailability')),
            ],
            options={
                'unique_together': {('weekly_availability', 'start_time', 'end_time', 'location')},
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='HealthManagementApp.form')),
            ],
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason_for_medication', models.TextField(blank=True, max_length=500, null=True)),
                ('notes', models.TextField(blank=True, max_length=500, null=True)),
                ('intake_instructions', models.CharField(blank=True, max_length=100, null=True)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('refill_count', models.IntegerField(blank=True, default=0, null=True)),
                ('last_refilled_date', models.DateField(blank=True, null=True)),
                ('refill_request_pending', models.BooleanField(default=False)),
                ('prescription_approved', models.BooleanField(default=False)),
                ('refill_requested', models.BooleanField(default=False)),
                ('Advices', models.ManyToManyField(blank=True, to='HealthManagementApp.advices')),
                ('Diagnoses', models.ManyToManyField(blank=True, to='HealthManagementApp.diagnoses')),
                ('Drug', models.ManyToManyField(blank=True, to='HealthManagementApp.drugs')),
                ('FollowUps', models.ManyToManyField(blank=True, to='HealthManagementApp.followups')),
                ('Histories', models.ManyToManyField(blank=True, to='HealthManagementApp.histories')),
                ('Symptoms', models.ManyToManyField(blank=True, to='HealthManagementApp.symptoms')),
                ('Tests', models.ManyToManyField(blank=True, to='HealthManagementApp.tests')),
                ('Vitals', models.ManyToManyField(blank=True, to='HealthManagementApp.vitals')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='HealthManagementApp.patient')),
                ('prescribing_doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='HealthManagementApp.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='PatientAppointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateField()),
                ('reason_for_appointment', models.TextField()),
                ('appointment_type', models.CharField(choices=[('Initial Consultation', 'Initial Consultation'), ('Follow-up', 'Follow-up'), ('Emergency', 'Emergency'), ('Routine Check', 'Routine Check')], default='Initial Consultation', max_length=20)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_appointments', to='HealthManagementApp.doctor')),
                ('patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='HealthManagementApp.patient')),
                ('time_slot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='HealthManagementApp.timeslot')),
            ],
        ),
        migrations.AddField(
            model_name='patient',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('salt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medicines', to='HealthManagementApp.salt')),
            ],
        ),
        migrations.CreateModel(
            name='FormResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_responses', to='HealthManagementApp.doctor')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='HealthManagementApp.form')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_responses', to='HealthManagementApp.patient')),
            ],
        ),
        migrations.AddField(
            model_name='form',
            name='patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='forms', to='HealthManagementApp.patient'),
        ),
        migrations.CreateModel(
            name='FieldResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='HealthManagementApp.field')),
                ('form_response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='field_responses', to='HealthManagementApp.formresponse')),
            ],
        ),
        migrations.CreateModel(
            name='FieldChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=255)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='HealthManagementApp.field')),
            ],
        ),
        migrations.AddField(
            model_name='field',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='HealthManagementApp.section'),
        ),
        migrations.AddField(
            model_name='drugs',
            name='Medical_name',
            field=models.ForeignKey(max_length=200, on_delete=django.db.models.deletion.CASCADE, to='HealthManagementApp.medicine'),
        ),
        migrations.CreateModel(
            name='DoctorAppointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('reason_for_visit', models.TextField()),
                ('appointment_type', models.CharField(choices=[('Initial Consultation', 'Initial Consultation'), ('Follow-up', 'Follow-up'), ('Emergency', 'Emergency'), ('Routine Check', 'Routine Check'), ('Telehealth', 'Telehealth')], default='Initial Consultation', max_length=20)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_appointments', to='HealthManagementApp.patient')),
            ],
        ),
        migrations.AddField(
            model_name='doctor',
            name='medical_license',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='licensed_doctor', to='HealthManagementApp.medicallicense'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='patients',
            field=models.ManyToManyField(blank=True, null=True, related_name='treated_by_doctors', to='HealthManagementApp.patient'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_user', to=settings.AUTH_USER_MODEL),
        ),
    ]
